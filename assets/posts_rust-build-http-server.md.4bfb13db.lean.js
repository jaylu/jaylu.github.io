import{_ as a,o as n,c as l,O as o}from"./chunks/framework.cef5bead.js";const d=JSON.parse('{"title":"Building HTTP service with Rust","description":"Building HTTP service with Rust","frontmatter":{"date":"2023-10-04T00:00:00.000Z","title":"Building HTTP service with Rust","tags":["Rust"],"description":"Building HTTP service with Rust"},"headers":[],"relativePath":"posts/rust-build-http-server.md","filePath":"posts/rust-build-http-server.md"}'),e={name:"posts/rust-build-http-server.md"};function p(t,s,F,r,c,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="building-http-service-with-rust" tabindex="-1">Building HTTP service with Rust <a class="header-anchor" href="#building-http-service-with-rust" aria-label="Permalink to &quot;Building HTTP service with Rust&quot;">​</a></h1><h2 id="cargo" tabindex="-1">Cargo <a class="header-anchor" href="#cargo" aria-label="Permalink to &quot;Cargo&quot;">​</a></h2><p>Cargo is the package manager and build system for Rust programming language. It is used to manage dependencies, build, and run Rust projects. Here are a few frequently used cargo commands:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">cargo new: Creates a new Rust project.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo build: Builds the project and its dependencies.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo run: Builds and runs the project.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo test: Runs the tests in the project.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo check: Checks the syntax and type correctness without producing an executable.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo update: Updates dependencies in the project.</span></span>
<span class="line"><span style="color:#F8F8F2;">cargo clean: Cleans the project files and directories.</span></span></code></pre></div><h2 id="create-a-project-with-cargo" tabindex="-1">Create a project with <code>cargo</code> <a class="header-anchor" href="#create-a-project-with-cargo" aria-label="Permalink to &quot;Create a project with \`cargo\`&quot;">​</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">mkdir</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rust-study</span><span style="color:#F8F8F2;"> &amp;&amp; </span><span style="color:#8BE9FD;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rust-study</span></span>
<span class="line"><span style="color:#50FA7B;">cargo</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">init</span></span></code></pre></div><p>Then we will have a project with this layout</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">lujunjie@mac:/Users/lujunjie/code/github/jaylu/rust-study</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">tree</span></span>
<span class="line"><span style="color:#8BE9FD;">.</span></span>
<span class="line"><span style="color:#50FA7B;">├──</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">Cargo.toml</span></span>
<span class="line"><span style="color:#50FA7B;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">src</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">└──</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">main.rs</span></span></code></pre></div><p>More folder structure info can be seen <a href="https://cheats.rs/#project-anatomy" target="_blank" rel="noreferrer">here</a></p><p>When can then try to run the project via <code>cargo run</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">lujunjie@mac:/Users/lujunjie/code/github/jaylu/rust-study</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cargo</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">run</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">Blocking</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">waiting</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">for</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">file</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">lock</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">on</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">package</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cache</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span><span style="color:#50FA7B;">Compiling</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rust-study</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">v0.1.0</span><span style="color:#F8F8F2;"> (/Users/lujunjie/code/github/jaylu/rust-study)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">Finished</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">dev</span><span style="color:#F8F8F2;"> [unoptimized </span><span style="color:#F1FA8C;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">debuginfo]</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">target</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">s</span><span style="color:#F8F8F2;">) </span><span style="color:#F1FA8C;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">10.62</span><span style="color:#F1FA8C;">s</span></span>
<span class="line"><span style="color:#F8F8F2;">     </span><span style="color:#50FA7B;">Running</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">\`</span><span style="color:#50FA7B;">target/debug/rust-study</span><span style="color:#F1FA8C;">\`</span></span>
<span class="line"><span style="color:#50FA7B;">Hello,</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">world!</span></span></code></pre></div><p>Here we are, the project skeleton is set up!!</p><h2 id="building-a-simple-web-server-with-actix" tabindex="-1">Building a simple web server with <code>Actix</code> <a class="header-anchor" href="#building-a-simple-web-server-with-actix" aria-label="Permalink to &quot;Building a simple web server with \`\`Actix\`\`&quot;">​</a></h2><p>I try do some quick study of the Rust HTTP lib:</p><table><thead><tr><th>Library</th><th>Async Support</th><th>Performance</th><th>Stability</th><th>Ease of Use</th><th>Features</th></tr></thead><tbody><tr><td>Actix Web</td><td>Yes</td><td>High</td><td>Stable</td><td>Moderate</td><td>Middlewares, WebSocket</td></tr><tr><td>Rocket</td><td>Yes</td><td>Moderate</td><td>Stable</td><td>Easy</td><td>Macros, Form Handling</td></tr><tr><td>Warp</td><td>Yes</td><td>High</td><td>Experimental</td><td>Easy</td><td>Filters, WebSockets</td></tr><tr><td>Hyper</td><td>Yes</td><td>High</td><td>Stable</td><td>Moderate</td><td>Low-level, Flexibility</td></tr><tr><td>Tide</td><td>Yes</td><td>High</td><td>Experimental</td><td>Easy</td><td>Middleware Chain, Async</td></tr><tr><td>Iron</td><td>No</td><td>Moderate</td><td>Unmaintained</td><td>Moderate</td><td>Middleware</td></tr><tr><td>Gotham</td><td>Yes</td><td>High</td><td>Experimental</td><td>Easy</td><td>Router, Middlewares</td></tr></tbody></table><p>And Actix seems to be supporting Middleware and the API is quite fit for my intuition. Below is what I had done to start up a simple http server:</p><ol><li><p>Adding dependencies in <code>cargo.toml</code></p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">[dev-dependencies]</span></span>
<span class="line"><span style="color:#F8F8F2;">actix-web = &quot;4&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">actix-files = &quot;0.6&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">env_logger = &quot;0.9.0&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">log = &quot;0.4&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">serde = { version = &quot;1.0&quot;, features = [&quot;derive&quot;] }</span></span>
<span class="line"><span style="color:#F8F8F2;">serde_json = &quot;1&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">futures = &quot;0.3&quot;</span></span></code></pre></div></li><li><p>Add code in <code>examples/actix_web.rs</code></p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">use</span><span style="color:#F8F8F2;"> actix_files</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Files</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">use</span><span style="color:#F8F8F2;"> actix_web</span><span style="color:#FF79C6;">::</span><span style="color:#F8F8F2;">{</span><span style="color:#8BE9FD;font-style:italic;">App</span><span style="color:#F8F8F2;">, get, </span><span style="color:#8BE9FD;font-style:italic;">HttpServer</span><span style="color:#F8F8F2;">, middleware</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Logger</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Responder</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">Result</span><span style="color:#F8F8F2;">, web};</span></span>
<span class="line"><span style="color:#FF79C6;">use</span><span style="color:#F8F8F2;"> serde</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Deserialize</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">#[get(</span><span style="color:#F1FA8C;">&quot;/hello/{name}&quot;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">greet</span><span style="color:#F8F8F2;">(name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> web</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Path</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">String</span><span style="color:#F8F8F2;">&gt;) </span><span style="color:#FF79C6;">-&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">impl</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Responder</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">format!</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;Hello {name}!&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">#[derive(</span><span style="color:#8BE9FD;font-style:italic;">Deserialize</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#FF79C6;">struct</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Info</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    username</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">String</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/// extract \`Info\` using serde</span></span>
<span class="line"><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">do_post</span><span style="color:#F8F8F2;">(info</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> web</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Json</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Info</span><span style="color:#F8F8F2;">&gt;) </span><span style="color:#FF79C6;">-&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Result</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">String</span><span style="color:#F8F8F2;">&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">println!</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;received request&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;font-style:italic;">Ok</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">format!</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;Welcome {}!&quot;</span><span style="color:#F8F8F2;">, info</span><span style="color:#FF79C6;">.</span><span style="color:#F8F8F2;">username))</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">#[actix_web</span><span style="color:#FF79C6;">::</span><span style="color:#F8F8F2;">main]</span><span style="color:#6272A4;"> // or #[tokio::main]</span></span>
<span class="line"><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">main</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">-&gt;</span><span style="color:#F8F8F2;"> std</span><span style="color:#FF79C6;">::</span><span style="color:#F8F8F2;">io</span><span style="color:#FF79C6;">::</span><span style="color:#8BE9FD;font-style:italic;">Result</span><span style="color:#F8F8F2;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#F8F8F2;">    env_logger</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">init_from_env</span><span style="color:#F8F8F2;">(env_logger</span><span style="color:#FF79C6;">::</span><span style="color:#F8F8F2;">Env</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">new</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">default_filter_or</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;info&quot;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">    log</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">info!</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;starting HTTP server at http://localhost:8080&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FD;font-style:italic;">HttpServer</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">new</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        App</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">new</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">route</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;/hello&quot;</span><span style="color:#F8F8F2;">, web</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">to</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> { </span><span style="color:#F1FA8C;">&quot;Hello World!&quot;</span><span style="color:#F8F8F2;"> }))</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">route</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;/post&quot;</span><span style="color:#F8F8F2;">, web</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">post</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">to</span><span style="color:#F8F8F2;">(do_post))</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">service</span><span style="color:#F8F8F2;">(greet)</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">service</span><span style="color:#F8F8F2;">(Files</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">new</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">&quot;/web&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#F1FA8C;">&quot;./examples/static&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">                </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">show_files_listing</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">                </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">use_last_modified</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">            )</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">wrap</span><span style="color:#F8F8F2;">(Logger</span><span style="color:#FF79C6;">::</span><span style="color:#50FA7B;">default</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">((</span><span style="color:#F1FA8C;">&quot;127.0.0.1&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">8080</span><span style="color:#F8F8F2;">))</span><span style="color:#FF79C6;">?</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">.</span><span style="color:#50FA7B;">run</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">.await</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><p>Run command <code>cargo run --example actix_web</code></p></li></ol><p>source code <a href="https://github.com/jaylu/rust-study" target="_blank" rel="noreferrer">here</a></p><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>It&#39;s simple enough to kick-start, but I might want a more low level HTTP server to build a web proxy in the near future, maybe let&#39;s look at using <code>Hyper</code> next time to read the request body in a streaming way.</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://cheats.rs/#cargo" target="_blank" rel="noreferrer">https://cheats.rs/#cargo</a></li><li><a href="https://actix.rs/" target="_blank" rel="noreferrer">https://actix.rs/</a></li></ul>`,22)]))}const u=a(e,[["render",p]]);export{d as __pageData,u as default};
