import{_ as e,o as a,c as n,O as o}from"./chunks/framework.cef5bead.js";const t="/assets/oauth2-sequencial.de60aa91.png",l="/assets/oidc-sequencial.2e99a9dc.png",y=JSON.parse('{"title":"OAuth2 and OpenID Connect (OIDC)","description":"Some material about OAuth2 and OpenID Connect (OIDC)","frontmatter":{"date":"2025-08-02T00:00:00.000Z","title":"OAuth2 and OpenID Connect (OIDC)","tags":["OAuth2 OIDC"],"description":"Some material about OAuth2 and OpenID Connect (OIDC)"},"headers":[],"relativePath":"posts/oauth-and-oidc.md","filePath":"posts/oauth-and-oidc.md"}'),p={name:"posts/oauth-and-oidc.md"};function i(r,s,c,d,u,F){return a(),n("div",null,s[0]||(s[0]=[o('<h1 id="oauth-and-openid-connect-oidc" tabindex="-1">OAuth and OpenID Connect (OIDC) <a class="header-anchor" href="#oauth-and-openid-connect-oidc" aria-label="Permalink to &quot;OAuth and OpenID Connect (OIDC)&quot;">​</a></h1><p><strong>OAuth 2.0</strong> is an open standard for authorization. It is designed to allow a third-party application to obtain limited access to a web service, either on behalf of a resource owner (such as a user) or by allowing the third-party application to obtain access on its own behalf. OAuth 2.0 provides a way to delegate access without sharing credentials, using tokens instead.</p><p><strong>OpenID Connect (OIDC)</strong> is an identity layer built on top of OAuth 2.0. It is used for authentication, allowing clients to verify the identity of the end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the user.</p><p>OpenID Connect extends OAuth 2.0 by introducing:</p><ul><li>ID Token: A JSON Web Token (JWT) that contains claims about the authentication of an end-user by an authorization server.</li><li>UserInfo Endpoint: An endpoint that returns claims about the authenticated user.</li></ul><p>OpenID Connect provides a simple identity layer on top of OAuth 2.0, making it possible to authenticate users and obtain their profile information in a standardized way. It is widely used for single sign-on (SSO) scenarios, where users can log in to multiple applications using a single set of credentials.</p><h1 id="a-simplify-version-of-oauth2-sequential-diagram" tabindex="-1">A simplify version of OAuth2 sequential diagram <a class="header-anchor" href="#a-simplify-version-of-oauth2-sequential-diagram" aria-label="Permalink to &quot;A simplify version of OAuth2 sequential diagram&quot;">​</a></h1><p><img src="'+t+'" alt="oauth2-sequencial"></p><h1 id="a-simplify-version-of-openid-connect-oidc-sequential-diagram" tabindex="-1">A simplify version of OpenID Connect (OIDC) sequential diagram <a class="header-anchor" href="#a-simplify-version-of-openid-connect-oidc-sequential-diagram" aria-label="Permalink to &quot;A simplify version of OpenID Connect (OIDC) sequential diagram&quot;">​</a></h1><p><img src="'+l+`" alt="oidc-sequencial"></p><h2 id="the-example-request" tabindex="-1">The example request <a class="header-anchor" href="#the-example-request" aria-label="Permalink to &quot;The example request&quot;">​</a></h2><h3 id="_1-client-redirects-user-to-op-for-authentication-consent" tabindex="-1">1. Client Redirects User to OP for Authentication &amp; Consent <a class="header-anchor" href="#_1-client-redirects-user-to-op-for-authentication-consent" aria-label="Permalink to &quot;1. Client Redirects User to OP for Authentication &amp; Consent&quot;">​</a></h3><p><strong>Browser is redirected to:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">GET https://op.example.com/authorize?</span></span>
<span class="line"><span style="color:#F8F8F2;">    response_type=code</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;client_id=client123</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;redirect_uri=https://client.example.com/callback</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;scope=openid profile email</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;state=xyz</span></span>
<span class="line"><span style="color:#F8F8F2;">    &amp;nonce=abc</span></span></code></pre></div><hr><h3 id="_2-user-authenticates-and-consents" tabindex="-1">2. User Authenticates and Consents <a class="header-anchor" href="#_2-user-authenticates-and-consents" aria-label="Permalink to &quot;2. User Authenticates and Consents&quot;">​</a></h3><ul><li><strong>OP shows login &amp; consent screen.</strong></li><li><strong>User enters credentials and consents.</strong></li><li><strong>OP redirects browser back to client:</strong></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">GET https://client.example.com/callback?code=SplxlOBeZQQYbYS6WxSbIA&amp;state=xyz</span></span></code></pre></div><p>The implementation of the <code>/callback</code> typically does the following:</p><ul><li>Verifies the state parameter matches what it sent (to prevent CSRF attacks).</li><li>Extracts the authorization code from the query string.</li><li>(Optionally) Checks for errors in the query string.</li><li>Proceeds to exchange the code for tokens by making a server-to-server POST request to the OP’s /token endpoint (step 3).</li></ul><p>This exchange is done securely on the backend, not in the browser.</p><hr><h3 id="_3-client-exchanges-code-for-tokens" tabindex="-1">3. Client Exchanges Code for Tokens <a class="header-anchor" href="#_3-client-exchanges-code-for-tokens" aria-label="Permalink to &quot;3. Client Exchanges Code for Tokens&quot;">​</a></h3><p><strong>Client (server-side) sends:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">POST https://op.example.com/token</span></span>
<span class="line"><span style="color:#F8F8F2;">Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span style="color:#F8F8F2;">Authorization: Basic base64(client_id:client_secret)</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">grant_type=authorization_code</span></span>
<span class="line"><span style="color:#F8F8F2;">&amp;code=SplxlOBeZQQYbYS6WxSbIA</span></span>
<span class="line"><span style="color:#F8F8F2;">&amp;redirect_uri=https://client.example.com/callback</span></span></code></pre></div><p><strong>OP responds:</strong></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">access_token</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">SlAV32hkKG</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">id_token</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">token_type</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Bearer</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">expires_in</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3600</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><ul><li>The Authorization header (with client credentials) is required by the OAuth2/OIDC spec for confidential clients to authenticate themselves to the OP.</li><li>The /token endpoint is meant to be called server-to-server, not from the browser. Sending client credentials (client_id and client_secret) to the browser is insecure—they must remain secret.</li></ul><hr><h3 id="_4-client-fetches-user-info" tabindex="-1">4. Client Fetches User Info <a class="header-anchor" href="#_4-client-fetches-user-info" aria-label="Permalink to &quot;4. Client Fetches User Info&quot;">​</a></h3><p><strong>Client sends:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">GET https://op.example.com/userinfo</span></span>
<span class="line"><span style="color:#F8F8F2;">Authorization: Bearer SlAV32hkKG</span></span></code></pre></div><p><strong>OP responds:</strong></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">sub</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">248289761001</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">name</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">Jane Doe</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">email</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">janedoe@example.com</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>After a successful token exchange, it&#39;s up the the server decide what to do next. For example, the backend can set a sessison cookie for the user, responds to the browser with an HTTP 200 and an HTML page, such as a dashboard or a “Login successful” page, or reidrect to the home page.</p><hr>`,36)]))}const m=e(p,[["render",i]]);export{y as __pageData,m as default};
