import{_ as t,o as r,c as a,O as i}from"./chunks/framework.cef5bead.js";const c=JSON.parse('{"title":"Building HTTP service with Rust Hyper","description":"Building HTTP service with Rust Hyper","frontmatter":{"date":"2023-10-04T00:00:00.000Z","title":"Building HTTP service with Rust Hyper","tags":["Rust"],"description":"Building HTTP service with Rust Hyper"},"headers":[],"relativePath":"working/rust-http-service-with-hyper.md","filePath":"working/rust-http-service-with-hyper.md"}'),s={name:"working/rust-http-service-with-hyper.md"};function o(n,e,h,l,u,p){return r(),a("div",null,e[0]||(e[0]=[i(`<h1 id="building-http-service-with-rust-hyper" tabindex="-1">Building HTTP service with Rust Hyper <a class="header-anchor" href="#building-http-service-with-rust-hyper" aria-label="Permalink to &quot;Building HTTP service with Rust Hyper&quot;">​</a></h1><h2 id="what-is-rust-hyper" tabindex="-1">What is Rust Hyper <a class="header-anchor" href="#what-is-rust-hyper" aria-label="Permalink to &quot;What is Rust Hyper&quot;">​</a></h2><p>Hyper is an extremely popular, low-level HTTP library written in Rust. The library is not a full-featured HTTP server or client, but rather it can be used as a “building block” for implementing those, as it contains methods for responding to requests, parsing request bodies and generating proper HTTP responses.</p><p>I want to build a http proxy, and hyper is allowing me to touch those &#39;low-level&#39; (e.g. body stream bytes...), that&#39;s why I want to use it, otherwise we can use other lib providing more convenience methods, as what mentioned on it&#39;s <a href="https://github.com/hyperium/hyper" target="_blank" rel="noreferrer">github</a> home page.</p><pre><code>If you are looking for a convenient HTTP client, then you may wish to consider reqwest. If you are not sure what HTTP server to choose, then you may want to consider axum or warp, the latter taking a more functional approach. Both are built on top of this library.
</code></pre><h2 id="reading-the-request-body-stream" tabindex="-1">Reading the request body stream <a class="header-anchor" href="#reading-the-request-body-stream" aria-label="Permalink to &quot;Reading the request body stream&quot;">​</a></h2><h2 id="writing-response-with-body-stream" tabindex="-1">Writing Response with body stream <a class="header-anchor" href="#writing-response-with-body-stream" aria-label="Permalink to &quot;Writing Response with body stream&quot;">​</a></h2><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://cheats.rs/#cargo" target="_blank" rel="noreferrer">https://cheats.rs/#cargo</a></li><li><a href="https://actix.rs/" target="_blank" rel="noreferrer">https://actix.rs/</a></li></ul>`,10)]))}const m=t(s,[["render",o]]);export{c as __pageData,m as default};
